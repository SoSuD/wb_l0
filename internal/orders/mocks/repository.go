// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	models "wb_l0/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, order
func (_m *Repository) Create(ctx context.Context, order *models.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - order *models.Order
func (_e *Repository_Expecter) Create(ctx interface{}, order interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, order)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, order *models.Order)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, *models.Order) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, orderId
func (_m *Repository) GetByID(ctx context.Context, orderId string) (*models.Order, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Order, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Order); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Repository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId string
func (_e *Repository_Expecter) GetByID(ctx interface{}, orderId interface{}) *Repository_GetByID_Call {
	return &Repository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, orderId)}
}

func (_c *Repository_GetByID_Call) Run(run func(ctx context.Context, orderId string)) *Repository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetByID_Call) Return(_a0 *models.Order, _a1 error) *Repository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*models.Order, error)) *Repository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastByCount provides a mock function with given fields: ctx, count
func (_m *Repository) GetLastByCount(ctx context.Context, count int) ([]*models.Order, error) {
	ret := _m.Called(ctx, count)

	if len(ret) == 0 {
		panic("no return value specified for GetLastByCount")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Order, error)); ok {
		return rf(ctx, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Order); ok {
		r0 = rf(ctx, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetLastByCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastByCount'
type Repository_GetLastByCount_Call struct {
	*mock.Call
}

// GetLastByCount is a helper method to define mock.On call
//   - ctx context.Context
//   - count int
func (_e *Repository_Expecter) GetLastByCount(ctx interface{}, count interface{}) *Repository_GetLastByCount_Call {
	return &Repository_GetLastByCount_Call{Call: _e.mock.On("GetLastByCount", ctx, count)}
}

func (_c *Repository_GetLastByCount_Call) Run(run func(ctx context.Context, count int)) *Repository_GetLastByCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Repository_GetLastByCount_Call) Return(_a0 []*models.Order, _a1 error) *Repository_GetLastByCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetLastByCount_Call) RunAndReturn(run func(context.Context, int) ([]*models.Order, error)) *Repository_GetLastByCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
